1.把二元查找树转变成排序的双向链表
 题目：
输入一棵二元查找树，将该二元查找树转换成一个排序的双向链表。
要求不能创建任何新的结点，只调整指针的指向

struct Node{
int data;
struct Node *left;
struct Node *right;
}

void mkTreeNode(Node *root,int val)
{
	Node *p_node = new Node();
	p_node->data = val;
	if(NULL == root) {
		root = p_node;
	}

	while(root != NULL) {
		if(root->data == val)
			return;
		if (root->data > val)
			mkTreeNode(root->left,val);
		else
			mkTreeNode(root->right,val);
	}
}
struct Node *root = NULL;
struct Node *doubleList = NULL;
void doubleLinkTree(Node *pCurNode){
if (pCurNode->left != NULL)
	doubleLinkTree(pCurNode->left);

//if (NULL == pCurNode) return ;

pCurNode->left = doubleList;
if(NULL != doubleList)
	doubleList->right = pCurNode;

doubleList = pCurNode;

if(pCurNode->right != NULL)
	doubleLinkTree(pCurNode->right);
}

main()
{
Node* root = NULL;
mkTree();
if(NULL == root)
	doubleLinkTree(root);

}


2.红黑树和平衡二叉树
